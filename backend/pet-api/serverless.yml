service: api-petShop
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: "${opt:stage, 'dev'}"
  environment: ${file(env-${self:provider.stage}.yml)}
  httpApi:
    authorizers:
      validate:
        type: request
        functionName: validate
        enableSimpleResponses: true
        identitySource: $request.header.Authorization
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource:
            - arn:aws:s3:::pets-csv/*
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - Fn::GetAtt: [QueueRegisterPet, Arn]

resources:
  Resources:
    DlqRegisterPet:
      Type: AWS::SQS:Queue
      Properties:
        QueueName: dlq-register-pet.fifo
        FifoQueue: true
        MessageRetentionPeriod: 86400
    QueueRegisterPet:
      Type: AWS::SQS:Queue
      Properties:
        QueueName: queue-register-pet.fifo
        FifoQueue: true
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - DlqRegisterPet
              - Arn
          maxReceiveCount: 5
        VisibilityTimeout: 10
  extensions:
    S3BucketPetscsv:
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - POST
                - GET
                - OPTIONS
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"

functions:
  uploadByCsv:
    handler: /application/api/uploadByCsv.handler
    events:
      - httpApi:
          path: /api/pet/batch
          method: post
          authorizer:
            name: validate

  sendPetsQueue:
    handler: /application/api/sendPetsQueue.handler
    events:
      - s3:
          bucket: ${file(env-${self:provider.stage}.yml):S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv

  registerPet:
    handler: /application/api/registerPet.handler
    events:
      - httpApi:
          path: /api/pet
          method: post
          authorizer:
            name: validate

  listPets:
    handler: /application/api/listPets.handler
    events:
      - httpApi:
          path: /api/pet
          method: get
          authorizer:
            name: validate

  search:
    handler: /application/api/search.handler
    events:
      - httpApi:
          path: /api/pet/search
          method: get
          authorizer:
            name: validate

  registerPetsByQueue:
    handler: /application/api/registerPetsByQueue.handler
    timeout: 2
    events:
      - sqs:
          queueName: queue-register-pet.fifo
          batchSize: 1
          arn:
            Fn::GetAtt:
              - QueueRegisterPet
              - Arn
  handlerErrorDLQ:
    handler: /application/api/handlerErrorDLQ.handler
    timeout: 2
    events:
      - sqs:
          queueName: dlq-register-pet.fifo
          batchSize: 1
          arn:
            Fn::GetAtt:
              - DlqRegisterPet
              - Arn

  validate:
    handler: /application/validate/authorization.handler

custom:
  serverless-offline:
    host: 0.0.0.0 # for docker container hosting
    httpPort: 8000
    websocketPort: 8001
    lambdaPort: 8002
  serverless-offline-sqs:
    endpoint: http://sqs:9324
    accessKeyId: local
    secretAccessKey: local
    autoCreate: false

plugins:
  - serverless-offline-sqs
  - serverless-s3-local
  - serverless-offline
